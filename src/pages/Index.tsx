import { Link } from "react-router-dom";
import { SEOHead } from "@/components/SEOHead";

const Section = ({ title, children }: { title: string; children: React.ReactNode }) => (
  <article className="card card-hover glow-effect p-6 space-y-4">
    <h2 className="text-2xl font-semibold tracking-tight bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent">{title}</h2>
    <div className="prose prose-neutral max-w-none dark:prose-invert">
      {children}
    </div>
  </article>
);

const Index = () => {
  return (
    <main>
      <SEOHead
        title="B·ªô b√†i t·∫≠p React UI ‚Äì 3 m·ª©c ƒë·ªô"
        description="B√†i t·∫≠p React: JavaScript trong React, Component tu·ª≥ bi·∫øn, State/Props, Styling, Lifecycle v·ªõi useEffect ‚Äì kh√¥ng d√πng API."
        canonicalPath="/"
      />
      <section className="bg-gradient-hero relative overflow-hidden">
        <div className="absolute inset-0 bg-gradient-glow"></div>
        <div className="container mx-auto py-20 text-center relative z-10">
          <h1 className="text-5xl font-bold tracking-tight mb-6 text-white drop-shadow-lg">
            B·ªô b√†i t·∫≠p React UI ‚Äì 3 m·ª©c ƒë·ªô
          </h1>
          <p className="text-white/90 max-w-2xl mx-auto text-lg leading-relaxed mb-8">
            Kh√¥ng g·ªçi API, d·ªØ li·ªáu mock c·ª•c b·ªô. Ch·∫°m ƒë·ªß 5 ch·ªß ƒë·ªÅ: JavaScript in React, Custom Components,
            State & Props, Styling, v√† React Lifecycle (useEffect).
          </p>
          <div className="mt-8 inline-flex items-center gap-4">
            <Link 
              to="/guides" 
              className="px-6 py-3 rounded-lg bg-white/20 text-white border border-white/30 hover:bg-white/30 transition-all duration-300 hover:scale-105 hover:shadow-lg backdrop-blur-sm"
            >
              Xem Guides
            </Link>
            <a 
              href="#exercises" 
              className="px-6 py-3 rounded-lg bg-white text-gray-900 hover:bg-white/90 transition-all duration-300 hover:scale-105 hover:shadow-xl font-medium"
            >
              ƒêi t·ªõi b√†i t·∫≠p
            </a>
          </div>
        </div>
      </section>

      <section id="exercises" className="container mx-auto py-10 space-y-8">
        <Section title='M·ª©c C∆° b·∫£n ‚Äì "Mini Todo/Notes"'>
          <div className="mb-4 p-4 bg-blue-50 dark:bg-blue-950 rounded-md border border-blue-200 dark:border-blue-800">
            <p className="text-blue-800 dark:text-blue-200 font-medium mb-2">üéØ Xem demo tr·ª±c ti·∫øp:</p>
            <Link 
              to="/demos/todo" 
              className="inline-flex items-center px-4 py-2 text-sm bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg hover:from-blue-700 hover:to-purple-700 transition-all duration-300 hover:scale-105 hover:shadow-lg font-medium"
            >
              ‚ú® Demo Todo App ‚Üí
            </Link>
          </div>

          <h3>M√¥ t·∫£ b√†i to√°n</h3>
          <p>
            X√¢y d·ª±ng ·ª©ng d·ª•ng ghi ch√∫/todo nh·ªè cho ph√©p th√™m, xo√°, s·ª≠a v√† ƒë√°nh d·∫•u ho√†n th√†nh. Giao di·ªán t·ªëi gi·∫£n,
            t·∫≠p trung v√†o thao t√°c nhanh v√† l∆∞u d·ªØ li·ªáu c·ª•c b·ªô ƒë·ªÉ kh√¥ng m·∫•t khi reload trang.
          </p>
          <p>
            B·ªë c·ª•c g·ªìm thanh nh·∫≠p nhanh, danh s√°ch item, v√† thanh l·ªçc tr·∫°ng th√°i. T√°ch nh·ªè UI ƒë·ªÉ t√°i s·ª≠ d·ª•ng ƒë∆∞·ª£c.
          </p>

          <h3>Y√™u c·∫ßu ch·ª©c nƒÉng</h3>
          <ul>
            <li><strong>B·∫Øt bu·ªôc:</strong> Th√™m/xo√°/s·ª≠a; toggle ho√†n th√†nh; Component ho√°: Item, List, InputBar, FilterBar.</li>
            <li>State/Props 1 chi·ªÅu: state ·ªü cha; con ph√°t s·ª± ki·ªán l√™n cha (onAdd, onToggle, onEdit, onRemove, onFilterChange).</li>
            <li>Styling: ch·ªçn 1 k·ªπ thu·∫≠t duy nh·∫•t v√† n√™u l√Ω do ch·ªçn.</li>
            <li>Lifecycle: ƒë·ªìng b·ªô localStorage; kh√¥i ph·ª•c khi mount; cleanup n·∫øu c√≥ timer.</li>
            <li><strong>Tu·ª≥ ch·ªçn:</strong> ph√≠m t·∫Øt Enter ƒë·ªÉ th√™m, Esc ƒë·ªÉ hu·ª∑ s·ª≠a.</li>
          </ul>

          <h3>Wireframe</h3>
          <pre>{`[InputBar.................][Add]
[Filter: All | Active | Done]
---------------------------------
[ ] Item title inline [Edit] [x]
[x] Completed item     [Edit] [x]
`}</pre>

          <h3>Acceptance Criteria</h3>
          <ul>
            <li><input type="checkbox" disabled /> Enter ƒë·ªÉ t·∫°o m·ª•c</li>
            <li><input type="checkbox" disabled /> S·ª≠a inline</li>
            <li><input type="checkbox" disabled /> L·ªçc All/Active/Done</li>
            <li><input type="checkbox" disabled /> Gi·ªØ d·ªØ li·ªáu sau reload</li>
            <li><input type="checkbox" disabled /> Responsive c∆° b·∫£n</li>
          </ul>

          <h3>H∆∞·ªõng d·∫´n k·ªπ thu·∫≠t</h3>
          <ul>
            <li>JavaScript in React: d√πng map/filter/sort khi hi·ªÉn th·ªã v√† l·ªçc; format ng√†y/gi·ªù n·∫øu c√≥.</li>
            <li>Custom Components: Item nh·∫≠n props {"{ id, title, done }"}; ph√°t s·ª± ki·ªán onToggle(id).</li>
            <li>State & Props: lifting state l√™n ListContainer; prop drilling t·ªëi thi·ªÉu, ch·ªâ xu·ªëng 1‚Äì2 c·∫•p.</li>
            <li>Styling: Tailwind v·ªõi token semantic (background, foreground, primary,...).</li>
            <li>Lifecycle: useEffect ƒë·ªçc/ghi localStorage; th√™m cleanup cho timer edit debounce (n·∫øu d√πng).</li>
          </ul>

          <h3>Bonus m·ªü r·ªông</h3>
          <ul>
            <li>Keyboard nav v·ªõi ArrowUp/Down ƒë·ªÉ ch·ªçn item, Enter ƒë·ªÉ toggle.</li>
            <li>Sort Done xu·ªëng cu·ªëi; sort theo th·ªùi gian t·∫°o.</li>
          </ul>

          <h3>Ki·ªÉm th·ª≠ th·ªß c√¥ng</h3>
          <ol>
            <li>G√µ ti√™u ƒë·ªÅ v√† nh·∫•n Enter ƒë·ªÉ t·∫°o.</li>
            <li>Click checkbox ƒë·ªÉ toggle.</li>
            <li>Nh·∫•n Edit, s·ª≠a ti√™u ƒë·ªÅ, Enter ƒë·ªÉ l∆∞u.</li>
            <li>Chuy·ªÉn Filter All/Active/Done, quan s√°t k·∫øt qu·∫£.</li>
            <li>Reload trang: d·ªØ li·ªáu c√≤n gi·ªØ.</li>
            <li>Thu nh·ªè m√†n h√¨nh: layout kh√¥ng v·ª°.</li>
          </ol>

          <h3>Y√™u c·∫ßu n·ªôp b√†i</h3>
          <pre>{`src/
  components/ (Item, List, InputBar, FilterBar)
  pages/
  data/ (mock n·∫øu c·∫ßn)
README: c√°ch ch·∫°y, GIF demo ng·∫Øn`}</pre>
        </Section>

        <Section title='M·ª©c Trung c·∫•p ‚Äì "Danh b·∫° li√™n h·ªá (Contact Book)"'>
          <div className="mb-4 p-4 bg-orange-50 dark:bg-orange-950 rounded-md border border-orange-200 dark:border-orange-800">
            <p className="text-orange-800 dark:text-orange-200 font-medium mb-2">üéØ Xem demo tr·ª±c ti·∫øp:</p>
            <Link 
              to="/demos/contact" 
              className="inline-flex items-center px-4 py-2 text-sm bg-gradient-to-r from-orange-600 to-pink-600 text-white rounded-lg hover:from-orange-700 hover:to-pink-700 transition-all duration-300 hover:scale-105 hover:shadow-lg font-medium"
            >
              üéØ Demo Contact Book ‚Üí
            </Link>
          </div>

          <h3>M√¥ t·∫£ b√†i to√°n</h3>
          <p>
            X√¢y danh b·∫° ƒë∆°n gi·∫£n t·ª´ d·ªØ li·ªáu mock {"{ id, name, phone, group }"}. H·ªó tr·ª£ t√¨m ki·∫øm c√≥ debounce,
            l·ªçc theo nh√≥m, v√† s·∫Øp x·∫øp theo t√™n A‚ÜíZ/Z‚ÜíA; hi·ªÉn th·ªã d·∫°ng l∆∞·ªõi responsive.
          </p>

          <h3>Y√™u c·∫ßu ch·ª©c nƒÉng</h3>
          <ul>
            <li><strong>B·∫Øt bu·ªôc:</strong> Search debounce 300ms; filter theo group; sort A‚ÜíZ/Z‚ÜíA.</li>
            <li>Component ho√°: ContactCard, ContactGrid, SearchBox, GroupChips, Toolbar.</li>
            <li>State ·ªü cha: filters/search/sort; truy·ªÅn props r√µ ki·ªÉu (TS type g·ª£i √Ω).</li>
            <li>Lifecycle: c·∫≠p nh·∫≠t document.title theo s·ªë k·∫øt qu·∫£; cleanup debounce.</li>
            <li><strong>Tu·ª≥ ch·ªçn:</strong> highlight chu·ªói kh·ªõp trong t√™n.</li>
          </ul>

          <h3>Wireframe</h3>
          <pre>{`[SearchBox...........] [Sort ‚¨áÔ∏é] [GroupChips]
---------------------------------------------
| Card | Card | Card | Card |
| Card | Card | Card | Card |
`}</pre>

          <h3>Acceptance Criteria</h3>
          <ul>
            <li><input type="checkbox" disabled /> T√¨m ki·∫øm m∆∞·ª£t, kh√¥ng gi·∫≠t</li>
            <li><input type="checkbox" disabled /> L·ªçc/Sort ho·∫°t ƒë·ªông ƒë√∫ng</li>
            <li><input type="checkbox" disabled /> document.title c·∫≠p nh·∫≠t & cleanup chu·∫©n</li>
            <li><input type="checkbox" disabled /> Grid responsive 2‚Äì4 c·ªôt</li>
          </ul>

          <h3>H∆∞·ªõng d·∫´n k·ªπ thu·∫≠t</h3>
          <ul>
            <li>JS in React: filter theo includes, sort v·ªõi localeCompare.</li>
            <li>Components: Card nh·∫≠n name/phone/group; Grid nh·∫≠n m·∫£ng contacts ƒë√£ x·ª≠ l√Ω.</li>
            <li>State/Props: n√¢ng state filter/search/sort l√™n cha; truy·ªÅn callback xu·ªëng con.</li>
            <li>Styling: Tailwind + token; card c√≥ hover lift (transform/box-shadow).</li>
            <li>Lifecycle: useEffect debounce setTimeout; cleanup trong return.</li>
          </ul>

          <h3>Bonus m·ªü r·ªông</h3>
          <ul>
            <li>Sort ƒëa ti√™u ch√≠ (group tr∆∞·ªõc, name sau).</li>
            <li>Keyboard nav trong Grid (Arrow keys + Enter).</li>
          </ul>

          <h3>Ki·ªÉm th·ª≠ th·ªß c√¥ng</h3>
          <ol>
            <li>Nh·∫≠p chu·ªói t√¨m ki·∫øm, quan s√°t debounce.</li>
            <li>ƒê·ªïi sort A‚ÜíZ/Z‚ÜíA, k·∫øt qu·∫£ c·∫≠p nh·∫≠t ƒë√∫ng.</li>
            <li>Ch·ªçn group chip, ch·ªâ c√≤n nh√≥m t∆∞∆°ng ·ª©ng.</li>
            <li>Xo√° n·ªôi dung search: danh s√°ch tr·ªü v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu.</li>
            <li>Quan s√°t document.title hi·ªÉn th·ªã s·ªë k·∫øt qu·∫£.</li>
            <li>Resize m√†n h√¨nh: grid ƒë·ªïi s·ªë c·ªôt 2‚Äì4.</li>
          </ol>

          <h3>Y√™u c·∫ßu n·ªôp b√†i</h3>
          <pre>{`src/
  components/ (ContactCard, ContactGrid, SearchBox, GroupChips, Toolbar)
  data/ contacts.mock.ts
README + GIF demo`}</pre>
        </Section>

        <Section title='M·ª©c N√¢ng cao ‚Äì "Dashboard Widgets ‚Äì KH√îNG API"'>
          <div className="mb-4 p-4 bg-green-50 dark:bg-green-950 rounded-md border border-green-200 dark:border-green-800">
            <p className="text-green-800 dark:text-green-200 font-medium mb-2">üéØ Xem demo tr·ª±c ti·∫øp:</p>
            <Link 
              to="/demos/dashboard" 
              className="inline-flex items-center px-4 py-2 text-sm bg-gradient-to-r from-green-600 to-teal-600 text-white rounded-lg hover:from-green-700 hover:to-teal-700 transition-all duration-300 hover:scale-105 hover:shadow-lg font-medium"
            >
              üöÄ Demo Dashboard ‚Üí
            </Link>
          </div>

          <h3>M√¥ t·∫£ b√†i to√°n</h3>
          <p>
            T·∫°o dashboard g·ªìm c√°c widget ƒë·ªôc l·∫≠p tr√™n d·ªØ li·ªáu mock. Gi·∫£ b·∫•t ƒë·ªìng b·ªô b·∫±ng setTimeout. C√≥ counter t·ª± tƒÉng,
            list c√≥ l·ªçc/sort, v√† theme toggle light/dark ƒë·ªìng b·ªô localStorage.
          </p>

          <h3>Y√™u c·∫ßu ch·ª©c nƒÉng</h3>
          <ul>
            <li><strong>B·∫Øt bu·ªôc:</strong> Widget: Counter (timer t·ª± tƒÉng start/stop), ListPanel (l·ªçc/sort), ThemeSwitch.</li>
            <li>Component ho√°: DashboardLayout, Toolbar, MetricCard, ListPanel, ThemeSwitch.</li>
            <li>State/Props: theme ·ªü cha, truy·ªÅn xu·ªëng con; m·ªói widget qu·∫£n l√Ω state ri√™ng; lifting khi c·∫ßn.</li>
            <li>Lifecycle: sync theme v√†o localStorage; timer cleanup khi unmount ho·∫∑c khi toggle.</li>
            <li><strong>Tu·ª≥ ch·ªçn:</strong> nh·ªõ tr·∫°ng th√°i m·ªü/ƒë√≥ng panel v√†o localStorage.</li>
          </ul>

          <h3>Wireframe</h3>
          <pre>{`[Toolbar: ThemeSwitch | Refresh Mock]
------------------------------------
| MetricCard | MetricCard | Counter |
|        ListPanel (filter/sort)    |
`}</pre>

          <h3>Acceptance Criteria</h3>
          <ul>
            <li><input type="checkbox" disabled /> Theme toggle l∆∞u & kh√¥i ph·ª•c</li>
            <li><input type="checkbox" disabled /> Counter d·ª´ng khi r·ªùi trang/t·∫Øt</li>
            <li><input type="checkbox" disabled /> Kh√¥ng memory leak</li>
            <li><input type="checkbox" disabled /> Kh√¥ng c·∫£nh b√°o dependency useEffect</li>
          </ul>

          <h3>H∆∞·ªõng d·∫´n k·ªπ thu·∫≠t</h3>
          <ul>
            <li>JS in React: map/sort cho list; format s·ªë cho metrics.</li>
            <li>Components: t√°ch nh·ªè theo ch·ª©c nƒÉng; prop r√µ r√†ng.</li>
            <li>State/Props: theme context (tu·ª≥ ch·ªçn) ho·∫∑c prop xu·ªëng con; tr√°nh prop drilling s√¢u.</li>
            <li>Styling: Tailwind tokens ƒë·ªìng b·ªô light/dark.</li>
            <li>Lifecycle: timer v·ªõi setInterval; cleanup tr√™n unmount v√† khi pause.</li>
          </ul>

          <h3>Bonus m·ªü r·ªông</h3>
          <ul>
            <li>Persist layout (th·ª© t·ª± widget) b·∫±ng localStorage.</li>
            <li>Animations nh·∫π khi card xu·∫•t hi·ªán.</li>
          </ul>

          <h3>Ki·ªÉm th·ª≠ th·ªß c√¥ng</h3>
          <ol>
            <li>Toggle theme, reload: theme gi·ªØ nguy√™n.</li>
            <li>B·∫≠t Counter, chuy·ªÉn trang kh√°c: d·ª´ng ƒë√∫ng, kh√¥ng leak.</li>
            <li>L·ªçc/sort list hi·ªÉn th·ªã ƒë√∫ng.</li>
            <li>Thay ƒë·ªïi nhanh filter nhi·ªÅu l·∫ßn: kh√¥ng l·ªói, kh√¥ng c·∫£nh b√°o.</li>
            <li>Resize: layout adapt t·ªët.</li>
          </ol>

          <h3>Y√™u c·∫ßu n·ªôp b√†i</h3>
          <pre>{`src/
  components/ (DashboardLayout, MetricCard, ListPanel, ThemeSwitch)
  data/ widgets.mock.ts
README + GIF demo`}</pre>
        </Section>

        <div className="text-center py-8">
          <Link 
            to="/guides" 
            className="inline-flex items-center px-6 py-3 bg-gradient-to-r from-primary to-accent text-white rounded-lg hover:scale-105 transition-all duration-300 hover:shadow-xl font-medium pulse-glow"
          >
            üìö M·ªü trang Guides ƒë·ªÉ xem snippet & checklist ‚Üí
          </Link>
        </div>
      </section>
    </main>
  );
};

export default Index;
